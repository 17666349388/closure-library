//!! generated by clutz.
// Generated from third_party/closure/goog/html/safehtml.js
declare namespace ಠ_ಠ.clutz.goog.html {
  /**
   * A string that is safe to use in HTML context in DOM APIs and HTML documents.
   *
   * A SafeHtml is a string-like object that carries the security type contract
   * that its value as a string will not cause untrusted script execution when
   * evaluated as HTML in a browser.
   *
   * Values of this type are guaranteed to be safe to use in HTML contexts,
   * such as, assignment to the innerHTML DOM property, or interpolation into
   * a HTML template in HTML PC_DATA context, in the sense that the use will not
   * result in a Cross-Site-Scripting vulnerability.
   *
   * Instances of this type must be created via the factory methods
   * (`goog.html.SafeHtml.create`, `goog.html.SafeHtml.htmlEscape`),
   * etc and not by invoking its constructor. The constructor intentionally takes
   * an extra parameter that cannot be constructed outside of this file and the
   * type is immutable; hence only a default instance corresponding to the empty
   * string can be obtained via constructor invocation.
   *
   * Creating SafeHtml objects HAS SIDE-EFFECTS due to calling Trusted Types Web
   * API.
   *
   * Note that there is no `goog.html.SafeHtml.fromConstant`. The reason is that
   * the following code would create an unsafe HTML:
   *
   * ```
   * goog.html.SafeHtml.concat(
   * goog.html.SafeHtml.fromConstant(goog.string.Const.from('<script>')),
   * goog.html.SafeHtml.htmlEscape(userInput),
   * goog.html.SafeHtml.fromConstant(goog.string.Const.from('<\/script>')));
   * ```
   *
   * There's `goog.dom.constHtmlToNode` to create a node from constant strings
   * only.
   */
  class SafeHtml implements ಠ_ಠ.clutz.goog.i18n.bidi.DirectionalString , ಠ_ಠ.clutz.goog.string.TypedString {
    private noStructuralTyping_goog_html_SafeHtml : any;
    /**
     * A string that is safe to use in HTML context in DOM APIs and HTML documents.
     *
     * A SafeHtml is a string-like object that carries the security type contract
     * that its value as a string will not cause untrusted script execution when
     * evaluated as HTML in a browser.
     *
     * Values of this type are guaranteed to be safe to use in HTML contexts,
     * such as, assignment to the innerHTML DOM property, or interpolation into
     * a HTML template in HTML PC_DATA context, in the sense that the use will not
     * result in a Cross-Site-Scripting vulnerability.
     *
     * Instances of this type must be created via the factory methods
     * (`goog.html.SafeHtml.create`, `goog.html.SafeHtml.htmlEscape`),
     * etc and not by invoking its constructor. The constructor intentionally takes
     * an extra parameter that cannot be constructed outside of this file and the
     * type is immutable; hence only a default instance corresponding to the empty
     * string can be obtained via constructor invocation.
     *
     * Creating SafeHtml objects HAS SIDE-EFFECTS due to calling Trusted Types Web
     * API.
     *
     * Note that there is no `goog.html.SafeHtml.fromConstant`. The reason is that
     * the following code would create an unsafe HTML:
     *
     * ```
     * goog.html.SafeHtml.concat(
     * goog.html.SafeHtml.fromConstant(goog.string.Const.from('<script>')),
     * goog.html.SafeHtml.htmlEscape(userInput),
     * goog.html.SafeHtml.fromConstant(goog.string.Const.from('<\/script>')));
     * ```
     *
     * There's `goog.dom.constHtmlToNode` to create a node from constant strings
     * only.
     */
    constructor (value : TrustedHTML | string , dir : ಠ_ಠ.clutz.goog.i18n.bidi.Dir | null , token : GlobalObject ) ;
    getDirection ( ) : any ;
    /**
     * Returns this SafeHtml's value as string.
     *
     * IMPORTANT: In code where it is security relevant that an object's type is
     * indeed `SafeHtml`, use `goog.html.SafeHtml.unwrap` instead of
     * this method. If in doubt, assume that it's security relevant. In particular,
     * note that goog.html functions which return a goog.html type do not guarantee
     * that the returned instance is of the right type. For example:
     *
     * <pre>
     * var fakeSafeHtml = new String('fake');
     * fakeSafeHtml.__proto__ = goog.html.SafeHtml.prototype;
     * var newSafeHtml = goog.html.SafeHtml.htmlEscape(fakeSafeHtml);
     * // newSafeHtml is just an alias for fakeSafeHtml, it's passed through by
     * // goog.html.SafeHtml.htmlEscape() as fakeSafeHtml
     * // instanceof goog.html.SafeHtml.
     * </pre>
     */
    getTypedStringValue ( ) : any ;
    implementsGoogI18nBidiDirectionalString : boolean ;
    implementsGoogStringTypedString : boolean ;
    /**
     * Returns a debug string-representation of this value.
     *
     * To obtain the actual string value wrapped in a SafeHtml, use
     * `goog.html.SafeHtml.unwrap`.
     */
    toString ( ) : any ;
    /**
     * A SafeHtml instance corresponding to the <br> tag.
     */
    static BR : ಠ_ಠ.clutz.goog.html.SafeHtml ;
    /**
     * A SafeHtml instance corresponding to the HTML doctype: "<!DOCTYPE html>".
     */
    static DOCTYPE_HTML : ಠ_ಠ.clutz.goog.html.SafeHtml ;
    /**
     * A SafeHtml instance corresponding to the empty string.
     */
    static EMPTY : ಠ_ಠ.clutz.goog.html.SafeHtml ;
    static ENABLE_ERROR_MESSAGES : boolean ;
    /**
     * Whether the `style` attribute is supported. Set to false to avoid the byte
     * weight of `goog.html.SafeStyle` where unneeded. An error will be thrown if
     * the `style` attribute is used.
     */
    static SUPPORT_STYLE_ATTRIBUTE : boolean ;
    /**
     * Checks if the user agent supports sandboxed iframes.
     */
    static canUseSandboxIframe ( ) : boolean ;
    /**
     * Converts an arbitrary string into an HTML comment by HTML-escaping the
     * contents and embedding the result between HTML comment markers.
     *
     * Escaping is needed because Internet Explorer supports conditional comments
     * and so may render HTML markup within comments.
     */
    static comment (text : string ) : ಠ_ಠ.clutz.goog.html.SafeHtml ;
    /**
     * Creates a new SafeHtml object by concatenating values.
     * @param var_args Values to concatenate.
     */
    static concat ( ...var_args : ( string | number | boolean | ಠ_ಠ.clutz.goog.string.TypedString | ಠ_ಠ.clutz.goog.i18n.bidi.DirectionalString | ( string | number | boolean | ಠ_ಠ.clutz.goog.string.TypedString | ಠ_ಠ.clutz.goog.i18n.bidi.DirectionalString ) [] ) [] ) : ಠ_ಠ.clutz.goog.html.SafeHtml ;
    /**
     * Creates a new SafeHtml object with known directionality by concatenating the
     * values.
     * @param dir Directionality.
     * @param var_args Elements of array arguments would be processed recursively.
     */
    static concatWithDir (dir : ಠ_ಠ.clutz.goog.i18n.bidi.Dir ,  ...var_args : ( string | number | boolean | ಠ_ಠ.clutz.goog.string.TypedString | ಠ_ಠ.clutz.goog.i18n.bidi.DirectionalString | ( string | number | boolean | ಠ_ಠ.clutz.goog.string.TypedString | ಠ_ಠ.clutz.goog.i18n.bidi.DirectionalString ) [] ) [] ) : ಠ_ಠ.clutz.goog.html.SafeHtml ;
    /**
     * Creates a SafeHtml content consisting of a tag with optional attributes and
     * optional content.
     *
     * For convenience tag names and attribute names are accepted as regular
     * strings, instead of goog.string.Const. Nevertheless, you should not pass
     * user-controlled values to these parameters. Note that these parameters are
     * syntactically validated at runtime, and invalid values will result in
     * an exception.
     *
     * Example usage:
     *
     * goog.html.SafeHtml.create('br');
     * goog.html.SafeHtml.create('div', {'class': 'a'});
     * goog.html.SafeHtml.create('p', {}, 'a');
     * goog.html.SafeHtml.create('p', {}, goog.html.SafeHtml.create('br'));
     *
     * goog.html.SafeHtml.create('span', {
     * 'style': {'margin': '0'}
     * });
     *
     * To guarantee SafeHtml's type contract is upheld there are restrictions on
     * attribute values and tag names.
     *
     * - For attributes which contain script code (on*), a goog.string.Const is
     * required.
     * - For attributes which contain style (style), a goog.html.SafeStyle or a
     * goog.html.SafeStyle.PropertyMap is required.
     * - For attributes which are interpreted as URLs (e.g. src, href) a
     * goog.html.SafeUrl, goog.string.Const or string is required. If a string
     * is passed, it will be sanitized with SafeUrl.sanitize().
     * - For tags which can load code or set security relevant page metadata,
     * more specific goog.html.SafeHtml.create*() functions must be used. Tags
     * which are not supported by this function are applet, base, embed, iframe,
     * link, math, object, script, style, svg, and template.
     * @param tagName The name of the tag. Only tag names consisting of [a-zA-Z0-9-] are allowed. Tag names documented above are disallowed.
     * @param opt_attributes Mapping from attribute names to their values. Only attribute names consisting of [a-zA-Z0-9-] are allowed. Value of null or undefined causes the attribute to be omitted.
     * @param opt_content Content to HTML-escape and put inside the tag. This must be empty for void tags like <br>. Array elements are concatenated.
     */
    static create (tagName : ಠ_ಠ.clutz.goog.dom.TagName | string , opt_attributes ? : { [ key: string ]: string | number | ಠ_ಠ.clutz.goog.string.TypedString | ಠ_ಠ.clutz.goog.html.SafeStyle.PropertyMap | undefined | null } | null , opt_content ? : string | number | boolean | ಠ_ಠ.clutz.goog.string.TypedString | ಠ_ಠ.clutz.goog.i18n.bidi.DirectionalString | ( string | number | boolean | ಠ_ಠ.clutz.goog.string.TypedString | ಠ_ಠ.clutz.goog.i18n.bidi.DirectionalString ) [] ) : ಠ_ಠ.clutz.goog.html.SafeHtml ;
    /**
     * Creates a SafeHtml representing an iframe tag.
     *
     * This by default restricts the iframe as much as possible by setting the
     * sandbox attribute to the empty string. If the iframe requires less
     * restrictions, set the sandbox attribute as tight as possible, but do not rely
     * on the sandbox as a security feature because it is not supported by older
     * browsers. If a sandbox is essential to security (e.g. for third-party
     * frames), use createSandboxIframe which checks for browser support.
     * @param opt_src The value of the src attribute. If null or undefined src will not be set.
     * @param opt_srcdoc The value of the srcdoc attribute. If null or undefined srcdoc will not be set.
     * @param opt_attributes Mapping from attribute names to their values. Only attribute names consisting of [a-zA-Z0-9-] are allowed. Value of null or undefined causes the attribute to be omitted.
     * @param opt_content Content to HTML-escape and put inside the tag. Array elements are concatenated.
     */
    static createIframe (opt_src ? : ಠ_ಠ.clutz.goog.html.TrustedResourceUrl | null , opt_srcdoc ? : ಠ_ಠ.clutz.goog.html.SafeHtml | null , opt_attributes ? : { [ key: string ]: string | number | ಠ_ಠ.clutz.goog.string.TypedString | ಠ_ಠ.clutz.goog.html.SafeStyle.PropertyMap | undefined | null } | null , opt_content ? : string | number | boolean | ಠ_ಠ.clutz.goog.string.TypedString | ಠ_ಠ.clutz.goog.i18n.bidi.DirectionalString | ( string | number | boolean | ಠ_ಠ.clutz.goog.string.TypedString | ಠ_ಠ.clutz.goog.i18n.bidi.DirectionalString ) [] ) : ಠ_ಠ.clutz.goog.html.SafeHtml ;
    /**
     * Creates a SafeHtml representing a meta refresh tag.
     * @param url Where to redirect. If a string is passed, it will be sanitized with SafeUrl.sanitize().
     * @param opt_secs Number of seconds until the page should be reloaded. Will be set to 0 if unspecified.
     */
    static createMetaRefresh (url : ಠ_ಠ.clutz.goog.html.SafeUrl | string , opt_secs ? : number ) : ಠ_ಠ.clutz.goog.html.SafeHtml ;
    /**
     * Creates a SafeHtml representing a sandboxed iframe tag.
     *
     * The sandbox attribute is enforced in its most restrictive mode, an empty
     * string. Consequently, the security requirements for the src and srcdoc
     * attributes are relaxed compared to SafeHtml.createIframe. This function
     * will throw on browsers that do not support the sandbox attribute, as
     * determined by SafeHtml.canUseSandboxIframe.
     *
     * The SafeHtml returned by this function can trigger downloads with no
     * user interaction on Chrome (though only a few, further attempts are blocked).
     * Firefox and IE will block all downloads from the sandbox.
     * @param opt_src The value of the src attribute. If null or undefined src will not be set.
     * @param opt_srcdoc The value of the srcdoc attribute. If null or undefined srcdoc will not be set. Will not be sanitized.
     * @param opt_attributes Mapping from attribute names to their values. Only attribute names consisting of [a-zA-Z0-9-] are allowed. Value of null or undefined causes the attribute to be omitted.
     * @param opt_content Content to HTML-escape and put inside the tag. Array elements are concatenated.
     */
    static createSandboxIframe (opt_src ? : string | ಠ_ಠ.clutz.goog.html.SafeUrl , opt_srcdoc ? : string , opt_attributes ? : { [ key: string ]: string | number | ಠ_ಠ.clutz.goog.string.TypedString | ಠ_ಠ.clutz.goog.html.SafeStyle.PropertyMap | undefined | null } , opt_content ? : string | number | boolean | ಠ_ಠ.clutz.goog.string.TypedString | ಠ_ಠ.clutz.goog.i18n.bidi.DirectionalString | ( string | number | boolean | ಠ_ಠ.clutz.goog.string.TypedString | ಠ_ಠ.clutz.goog.i18n.bidi.DirectionalString ) [] ) : ಠ_ಠ.clutz.goog.html.SafeHtml ;
    /**
     * Creates a SafeHtml representing a script tag. Does not allow the language,
     * src, text or type attributes to be set.
     * @param script Content to put inside the tag. Array elements are concatenated.
     * @param opt_attributes Mapping from attribute names to their values. Only attribute names consisting of [a-zA-Z0-9-] are allowed. Value of null or undefined causes the attribute to be omitted.
     */
    static createScript (script : ಠ_ಠ.clutz.goog.html.SafeScript | ಠ_ಠ.clutz.goog.html.SafeScript [] , opt_attributes ? : { [ key: string ]: string | number | ಠ_ಠ.clutz.goog.string.TypedString | ಠ_ಠ.clutz.goog.html.SafeStyle.PropertyMap | undefined | null } | null ) : ಠ_ಠ.clutz.goog.html.SafeHtml ;
    /**
     * Creates a SafeHtml representing a script tag with the src attribute.
     * @param src The value of the src attribute.
     * @param opt_attributes Mapping from attribute names to their values. Only attribute names consisting of [a-zA-Z0-9-] are allowed. Value of null or undefined causes the attribute to be omitted.
     */
    static createScriptSrc (src : ಠ_ಠ.clutz.goog.html.TrustedResourceUrl , opt_attributes ? : { [ key: string ]: string | number | ಠ_ಠ.clutz.goog.string.TypedString | ಠ_ಠ.clutz.goog.html.SafeStyle.PropertyMap | undefined | null } | null ) : ಠ_ಠ.clutz.goog.html.SafeHtml ;
    /**
     * Creates a SafeHtml representing a style tag. The type attribute is set
     * to "text/css".
     * @param styleSheet Content to put inside the tag. Array elements are concatenated.
     * @param opt_attributes Mapping from attribute names to their values. Only attribute names consisting of [a-zA-Z0-9-] are allowed. Value of null or undefined causes the attribute to be omitted.
     */
    static createStyle (styleSheet : ಠ_ಠ.clutz.goog.html.SafeStyleSheet | ಠ_ಠ.clutz.goog.html.SafeStyleSheet [] , opt_attributes ? : { [ key: string ]: string | number | ಠ_ಠ.clutz.goog.string.TypedString | ಠ_ಠ.clutz.goog.html.SafeStyle.PropertyMap | undefined | null } | null ) : ಠ_ಠ.clutz.goog.html.SafeHtml ;
    /**
     * Creates a SafeHtml content with known directionality consisting of a tag with
     * optional attributes and optional content.
     * @param dir Directionality.
     */
    static createWithDir (dir : ಠ_ಠ.clutz.goog.i18n.bidi.Dir , tagName : string , opt_attributes ? : { [ key: string ]: string | number | ಠ_ಠ.clutz.goog.string.TypedString | ಠ_ಠ.clutz.goog.html.SafeStyle.PropertyMap | undefined | null } | null , opt_content ? : string | number | boolean | ಠ_ಠ.clutz.goog.string.TypedString | ಠ_ಠ.clutz.goog.i18n.bidi.DirectionalString | ( string | number | boolean | ಠ_ಠ.clutz.goog.string.TypedString | ಠ_ಠ.clutz.goog.i18n.bidi.DirectionalString ) [] ) : ಠ_ಠ.clutz.goog.html.SafeHtml ;
    /**
     * Coerces an arbitrary object into a SafeHtml object.
     *
     * If `textOrHtml` is already of type `goog.html.SafeHtml`, the same
     * object is returned. Otherwise, `textOrHtml` is coerced to string, and
     * HTML-escaped. If `textOrHtml` is of a type that implements
     * `goog.i18n.bidi.DirectionalString`, its directionality, if known, is
     * preserved.
     * @param textOrHtml The text or SafeHtml to coerce.
     * @deprecated Use goog.html.SafeHtml.htmlEscape.
     */
    static from (a : string | number | boolean | ಠ_ಠ.clutz.goog.string.TypedString | ಠ_ಠ.clutz.goog.i18n.bidi.DirectionalString ) : ಠ_ಠ.clutz.goog.html.SafeHtml ;
    /**
     * Returns HTML-escaped text as a SafeHtml object.
     *
     * If text is of a type that implements
     * `goog.i18n.bidi.DirectionalString`, the directionality of the new
     * `SafeHtml` object is set to `text`'s directionality, if known.
     * Otherwise, the directionality of the resulting SafeHtml is unknown (i.e.,
     * `null`).
     * @param textOrHtml The text to escape. If the parameter is of type SafeHtml it is returned directly (no escaping is done).
     */
    static htmlEscape (textOrHtml : string | number | boolean | ಠ_ಠ.clutz.goog.string.TypedString | ಠ_ಠ.clutz.goog.i18n.bidi.DirectionalString ) : ಠ_ಠ.clutz.goog.html.SafeHtml ;
    /**
     * Returns HTML-escaped text as a SafeHtml object, with newlines changed to
     * &lt;br&gt;.
     * @param textOrHtml The text to escape. If the parameter is of type SafeHtml it is returned directly (no escaping is done).
     */
    static htmlEscapePreservingNewlines (textOrHtml : string | number | boolean | ಠ_ಠ.clutz.goog.string.TypedString | ಠ_ಠ.clutz.goog.i18n.bidi.DirectionalString ) : ಠ_ಠ.clutz.goog.html.SafeHtml ;
    /**
     * Returns HTML-escaped text as a SafeHtml object, with newlines changed to
     * &lt;br&gt; and escaping whitespace to preserve spatial formatting. Character
     * entity #160 is used to make it safer for XML.
     * @param textOrHtml The text to escape. If the parameter is of type SafeHtml it is returned directly (no escaping is done).
     */
    static htmlEscapePreservingNewlinesAndSpaces (textOrHtml : string | number | boolean | ಠ_ಠ.clutz.goog.string.TypedString | ಠ_ಠ.clutz.goog.i18n.bidi.DirectionalString ) : ಠ_ಠ.clutz.goog.html.SafeHtml ;
    /**
     * Creates a new SafeHtml object by joining the parts with separator.
     * @param parts Parts to join. If a part contains an array then each member of this array is also joined with the separator.
     */
    static join (separator : string | number | boolean | ಠ_ಠ.clutz.goog.string.TypedString | ಠ_ಠ.clutz.goog.i18n.bidi.DirectionalString , parts : ( string | number | boolean | ಠ_ಠ.clutz.goog.string.TypedString | ಠ_ಠ.clutz.goog.i18n.bidi.DirectionalString | ( string | number | boolean | ಠ_ಠ.clutz.goog.string.TypedString | ಠ_ಠ.clutz.goog.i18n.bidi.DirectionalString ) [] ) [] ) : ಠ_ಠ.clutz.goog.html.SafeHtml ;
    /**
     * Performs a runtime check that the provided object is indeed a SafeHtml
     * object, and returns its value.
     * @param safeHtml The object to extract from.
     */
    static unwrap (safeHtml : ಠ_ಠ.clutz.goog.html.SafeHtml ) : string ;
    /**
     * Unwraps value as TrustedHTML if supported or as a string if not.
     */
    static unwrapTrustedHTML (safeHtml : ಠ_ಠ.clutz.goog.html.SafeHtml ) : TrustedHTML | string ;
  }
}
// Generated from third_party/closure/goog/html/safehtml.js
declare namespace ಠ_ಠ.clutz.goog.html.SafeHtml {
  type AttributeValue = string | number | ಠ_ಠ.clutz.goog.string.TypedString | ಠ_ಠ.clutz.goog.html.SafeStyle.PropertyMap | undefined | null ;
}
// Generated from third_party/closure/goog/html/safehtml.js
declare module 'goog:goog.html.SafeHtml' {
  import SafeHtml = ಠ_ಠ.clutz.goog.html.SafeHtml;
  export default SafeHtml;
  const __clutz_actual_path: 'google3/third_party/closure/goog/html/safehtml';
}
declare module 'google3/third_party/closure/goog/html/safehtml' {
  import SafeHtml = ಠ_ಠ.clutz.goog.html.SafeHtml;
  export { SafeHtml };
  const __clutz_strip_property: 'SafeHtml';
  const __clutz_actual_namespace: 'goog.html.SafeHtml';
}
