//!! generated by clutz.
// Generated from third_party/closure/goog/object/object.js
declare namespace ಠ_ಠ.clutz.goog.object {
  /**
   * Adds a key-value pair to the object. Throws an exception if the key is
   * already in use. Use set if you want to change an existing pair.
   * @param obj The object to which to add the key-value pair.
   * @param key The key to add.
   * @param val The value to add.
   */
  function add < K = any , V = any > (obj : { [ /* warning: coerced from K */ key: string ]: V } | null , key : string , val : V ) : void ;
  /**
   * Removes all key value pairs from the object/map/hash.
   * @param obj The object to clear.
   */
  function clear (obj : GlobalObject | null ) : void ;
  /**
   * Returns a shallow clone of the object.
   * @param obj Object to clone.
   */
  function clone < K = any , V = any > (obj : { [ /* warning: coerced from K */ key: string ]: V } | null ) : { [ /* warning: coerced from K */ key: string ]: V } ;
  /**
   * Whether the object/hash/map contains the given object as a value.
   * An alias for goog.object.containsValue(obj, val).
   * @param obj The object in which to look for val.
   * @param val The object for which to check.
   */
  function contains < K = any , V = any > (obj : { [ /* warning: coerced from K */ key: string ]: V } | null , val : V ) : boolean ;
  /**
   * Whether the object/map/hash contains the given key.
   * @param obj The object in which to look for key.
   * @param key The key for which to check.
   */
  function containsKey (obj : GlobalObject | null , key : any ) : boolean ;
  /**
   * Whether the object/map/hash contains the given value. This is O(n).
   * @param obj The object in which to look for val.
   * @param val The value for which to check.
   */
  function containsValue < K = any , V = any > (obj : { [ /* warning: coerced from K */ key: string ]: V } | null , val : V ) : boolean ;
  /**
   * Creates a new object built from the key-value pairs provided as arguments.
   * @param var_args If only one argument is provided and it is an array then this is used as the arguments, otherwise even arguments are used as the property names and odd arguments are used as the property values.
   */
  function create ( ...var_args : any [] ) : GlobalObject ;
  /**
   * Creates an immutable view of the underlying object, if the browser
   * supports immutable objects.
   *
   * In default mode, writes to this view will fail silently. In strict mode,
   * they will throw an error.
   * @param obj An object.
   */
  function createImmutableView < K = any , V = any > (obj : { [ /* warning: coerced from K */ key: string ]: V } ) : { [ /* warning: coerced from K */ key: string ]: V } ;
  /**
   * Creates a new object where the property names come from the arguments but
   * the value is always set to true
   * @param var_args If only one argument is provided and it is an array then this is used as the arguments, otherwise the arguments are used as the property names.
   */
  function createSet ( ...var_args : any [] ) : GlobalObject ;
  /**
   * Compares two objects for equality using === on the values.
   */
  function equals < K = any , V = any > (a : { [ /* warning: coerced from K */ key: string ]: V } , b : { [ /* warning: coerced from K */ key: string ]: V } ) : boolean ;
  /**
   * Calls a function for each element in an object/map/hash. If
   * all calls return true, returns true. If any call returns false, returns
   * false at this point and does not continue to check the remaining elements.
   * @param obj The object to check.
   * @param f The function to call for every element. This function takes 3 arguments (the value, the key and the object) and should return a boolean.
   * @param opt_obj This is used as the 'this' object within f.
   */
  function every < T = any , K = any , V = any > (obj : { [ /* warning: coerced from K */ key: string ]: V } | null , f : ( (this : T , a : V , b : any , c : { [ /* warning: coerced from K */ key: string ]: V } | null ) => boolean ) | null , opt_obj ? : T ) : boolean ;
  /**
   * Extends an object with another object.
   * This operates 'in-place'; it does not create a new Object.
   *
   * Example:
   * var o = {};
   * goog.object.extend(o, {a: 0, b: 1});
   * o; // {a: 0, b: 1}
   * goog.object.extend(o, {b: 2, c: 3});
   * o; // {a: 0, b: 2, c: 3}
   * @param target The object to modify. Existing properties will be overwritten if they are also present in one of the objects in `var_args`.
   * @param var_args The objects from which values will be copied.
   * @deprecated Prefer Object.assign
   */
  function extend (target : GlobalObject | null ,  ...var_args : ( GlobalObject | null | undefined ) [] ) : void ;
  /**
   * Calls a function for each element in an object/map/hash. If that call returns
   * true, adds the element to a new object.
   * @param obj The object over which to iterate.
   * @param f The function to call for every element. This function takes 3 arguments (the value, the key and the object) and should return a boolean. If the return value is true the element is added to the result object. If it is false the element is not included.
   * @param opt_obj This is used as the 'this' object within f.
   */
  function filter < T = any , K = any , V = any > (obj : { [ /* warning: coerced from K */ key: string ]: V } | null , f : (this : T , a : V , b : any , c : { [ /* warning: coerced from K */ key: string ]: V } | null ) => boolean , opt_obj ? : T ) : { [ /* warning: coerced from K */ key: string ]: V } ;
  /**
   * Searches an object for an element that satisfies the given condition and
   * returns its key.
   * @param obj The object to search in.
   * @param f The function to call for every element. Takes 3 arguments (the value, the key and the object) and should return a boolean.
   * @param opt_this An optional "this" context for the function.
   */
  function findKey < T = any , K = any , V = any > (obj : { [ /* warning: coerced from K */ key: string ]: V } | null , f : (this : T , a : V , b : string , c : { [ /* warning: coerced from K */ key: string ]: V } | null ) => boolean , opt_this ? : T ) : string | undefined ;
  /**
   * Searches an object for an element that satisfies the given condition and
   * returns its value.
   * @param obj The object to search in.
   * @param f The function to call for every element. Takes 3 arguments (the value, the key and the object) and should return a boolean.
   * @param opt_this An optional "this" context for the function.
   */
  function findValue < T = any , K = any , V = any > (obj : { [ /* warning: coerced from K */ key: string ]: V } | null , f : (this : T , a : V , b : string , c : { [ /* warning: coerced from K */ key: string ]: V } | null ) => boolean , opt_this ? : T ) : V ;
  /**
   * Calls a function for each element in an object/map/hash.
   * @param obj The object over which to iterate.
   * @param f The function to call for every element. This function takes 3 arguments (the value, the key and the object) and the return value is ignored.
   * @param opt_obj This is used as the 'this' object within f.
   */
  function forEach < T = any , K = any , V = any > (obj : { [ /* warning: coerced from K */ key: string ]: V } | null , f : (this : T , a : V , b : any , c : { [ /* warning: coerced from K */ key: string ]: V } | null ) => any , opt_obj ? : T ) : void ;
  /**
   * Returns the value for the given key.
   * @param obj The object from which to get the value.
   * @param key The key for which to get the value.
   * @param opt_val The value to return if no item is found for the given key (default is undefined).
   */
  function get < K = any , V = any , R = any > (obj : { [ /* warning: coerced from K */ key: string ]: V } | null , key : string , opt_val ? : R ) : V | R | undefined ;
  /**
   * Get all properties names on a given Object regardless of enumerability.
   *
   * <p> If the browser does not support `Object.getOwnPropertyNames` nor
   * `Object.getPrototypeOf` then this is equivalent to using
   * `goog.object.getKeys`
   * @param obj The object to get the properties of.
   * @param opt_includeObjectPrototype Whether properties defined on `Object.prototype` should be included in the result.
   * @param opt_includeFunctionPrototype Whether properties defined on `Function.prototype` should be included in the result.
   */
  function getAllPropertyNames (obj : GlobalObject | null , opt_includeObjectPrototype ? : boolean , opt_includeFunctionPrototype ? : boolean ) : string [] ;
  /**
   * Returns one key from the object map, if any exists.
   * For map literals the returned key will be the first one in most of the
   * browsers (a know exception is Konqueror).
   * @param obj The object to pick a key from.
   */
  function getAnyKey (obj : GlobalObject | null ) : string | undefined ;
  /**
   * Returns one value from the object map, if any exists.
   * For map literals the returned value will be the first one in most of the
   * browsers (a know exception is Konqueror).
   * @param obj The object to pick a value from.
   */
  function getAnyValue < K = any , V = any > (obj : { [ /* warning: coerced from K */ key: string ]: V } | null ) : V | undefined ;
  /**
   * Returns the number of key-value pairs in the object map.
   * @param obj The object for which to get the number of key-value pairs.
   */
  function getCount (obj : GlobalObject | null ) : number ;
  /**
   * Returns the keys of the object/map/hash.
   * @param obj The object from which to get the keys.
   */
  function getKeys (obj : GlobalObject | null ) : string [] ;
  /**
   * Given a ES5 or ES6 class reference, return its super class / super
   * constructor.
   *
   * This should be used in rare cases where you need to walk up the inheritance
   * tree (this is generally a bad idea). But this work with ES5 and ES6 classes,
   * unlike relying on the superClass_ property.
   *
   * Note: To start walking up the hierarchy from an instance call this with its
   * `constructor` property; e.g. `getSuperClass(instance.constructor)`.
   */
  function getSuperClass (constructor : { new ( ) : any } ) : GlobalObject | null ;
  /**
   * Get a value from an object multiple levels deep.  This is useful for
   * pulling values from deeply nested objects, such as JSON responses.
   * Example usage: getValueByKeys(jsonObj, 'foo', 'entries', 3)
   * @param obj An object to get the value from.  Can be array-like.
   * @param var_args A number of keys (as strings, or numbers, for array-like objects).  Can also be specified as a single array of keys.
   */
  function getValueByKeys (obj : GlobalObject ,  ...var_args : ( string | number | ArrayLike < number | string > ) [] ) : any ;
  /**
   * Returns the values of the object/map/hash.
   * @param obj The object from which to get the values.
   */
  function getValues < K = any , V = any > (obj : { [ /* warning: coerced from K */ key: string ]: V } | null ) : V [] ;
  /**
   * Whether the object/map/hash is empty.
   * @param obj The object to test.
   */
  function isEmpty (obj : GlobalObject | null ) : boolean ;
  function isImmutableView (obj : GlobalObject ) : boolean ;
  /**
   * For every element in an object/map/hash calls a function and inserts the
   * result into a new object.
   * @param obj The object over which to iterate.
   * @param f The function to call for every element. This function takes 3 arguments (the value, the key and the object) and should return something. The result will be inserted into a new object.
   * @param opt_obj This is used as the 'this' object within f.
   */
  function map < T = any , K = any , V = any , R = any > (obj : { [ /* warning: coerced from K */ key: string ]: V } | null , f : (this : T , a : V , b : any , c : { [ /* warning: coerced from K */ key: string ]: V } | null ) => R , opt_obj ? : T ) : { [ /* warning: coerced from K */ key: string ]: R } ;
  /**
   * Removes a key-value pair based on the key.
   * @param obj The object from which to remove the key.
   * @param key The key to remove.
   */
  function remove (obj : GlobalObject | null , key : any ) : boolean ;
  /**
   * Adds a key-value pair to the object/map/hash.
   * @param obj The object to which to add the key-value pair.
   * @param key The key to add.
   * @param value The value to add.
   */
  function set < K = any , V = any > (obj : { [ /* warning: coerced from K */ key: string ]: V } | null , key : string , value : V ) : void ;
  /**
   * Adds a key-value pair to the object/map/hash if it doesn't exist yet.
   * @param obj The object to which to add the key-value pair.
   * @param key The key to add.
   * @param value The value to add if the key wasn't present.
   */
  function setIfUndefined < K = any , V = any > (obj : { [ /* warning: coerced from K */ key: string ]: V } | null , key : string , value : V ) : V ;
  /**
   * Sets a key and value to an object if the key is not set. The value will be
   * the return value of the given function. If the key already exists, the
   * object will not be changed and the function will not be called (the function
   * will be lazily evaluated -- only called if necessary).
   *
   * This function is particularly useful when used with an `Object` which is
   * acting as a cache.
   * @param obj The object to which to add the key-value pair.
   * @param key The key to add.
   * @param f The value to add if the key wasn't present.
   */
  function setWithReturnValueIfNotSet < K = any , V = any > (obj : { [ /* warning: coerced from K */ key: string ]: V } , key : string , f : ( ) => V ) : V ;
  /**
   * Calls a function for each element in an object/map/hash. If any
   * call returns true, returns true (without checking the rest). If
   * all calls return false, returns false.
   * @param obj The object to check.
   * @param f The function to call for every element. This function takes 3 arguments (the value, the key and the object) and should return a boolean.
   * @param opt_obj This is used as the 'this' object within f.
   */
  function some < T = any , K = any , V = any > (obj : { [ /* warning: coerced from K */ key: string ]: V } | null , f : (this : T , a : V , b : any , c : { [ /* warning: coerced from K */ key: string ]: V } | null ) => boolean , opt_obj ? : T ) : boolean ;
  /**
   * Returns a new object in which all the keys and values are interchanged
   * (keys become values and values become keys). If multiple keys map to the
   * same value, the chosen transposed value is implementation-dependent.
   * @param obj The object to transpose.
   */
  function transpose (obj : GlobalObject | null ) : GlobalObject ;
  /**
   * Clones a value. The input may be an Object, Array, or basic type. Objects and
   * arrays will be cloned recursively.
   *
   * WARNINGS:
   * <code>goog.object.unsafeClone</code> does not detect reference loops. Objects
   * that refer to themselves will cause infinite recursion.
   *
   * <code>goog.object.unsafeClone</code> is unaware of unique identifiers, and
   * copies UIDs created by <code>getUid</code> into cloned results.
   * @param obj The value to clone.
   */
  function unsafeClone < T = any > (obj : T ) : T ;
}
// Generated from third_party/closure/goog/object/object.js
declare module 'goog:goog.object' {
  import object = ಠ_ಠ.clutz.goog.object;
  export = object;
  const __clutz_actual_path: 'google3/third_party/closure/goog/object/object';
}
declare module 'google3/third_party/closure/goog/object/object' {
  import object = ಠ_ಠ.clutz.goog.object;
  export = object;
  const __clutz_actual_namespace: 'goog.object';
}
