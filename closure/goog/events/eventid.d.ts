//!! generated by clutz.
// Generated from third_party/closure/goog/events/eventid.js
declare namespace ಠ_ಠ.clutz.goog.events {
  /**
   * A templated class that is used when registering for events. Typical usage:
   *
   * /** @type {goog.events.EventId<MyEventObj>} *\
   * var myEventId = new goog.events.EventId(
   * goog.events.getUniqueId(('someEvent'));
   *
   * // No need to cast or declare here since the compiler knows the
   * // correct type of 'evt' (MyEventObj).
   * something.listen(myEventId, function(evt) {});
   */
  class EventId < T = any > {
    private noStructuralTyping_goog_events_EventId : [ T ];
    /**
     * A templated class that is used when registering for events. Typical usage:
     *
     * /** @type {goog.events.EventId<MyEventObj>} *\
     * var myEventId = new goog.events.EventId(
     * goog.events.getUniqueId(('someEvent'));
     *
     * // No need to cast or declare here since the compiler knows the
     * // correct type of 'evt' (MyEventObj).
     * something.listen(myEventId, function(evt) {});
     */
    constructor (eventId : string ) ;
    id : string ;
    toString ( ) : any ;
  }
}
// Generated from third_party/closure/goog/events/eventid.js
declare module 'goog:goog.events.EventId' {
  import EventId = ಠ_ಠ.clutz.goog.events.EventId;
  export default EventId;
  const __clutz_actual_path: 'google3/third_party/closure/goog/events/eventid';
}
declare module 'google3/third_party/closure/goog/events/eventid' {
  import EventId = ಠ_ಠ.clutz.goog.events.EventId;
  export { EventId };
  const __clutz_strip_property: 'EventId';
  const __clutz_actual_namespace: 'goog.events.EventId';
}
